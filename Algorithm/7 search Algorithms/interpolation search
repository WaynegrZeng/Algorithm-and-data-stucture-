二分法采用的是折半查找，但事实上我们可以折1/4，2/3等。
插值查找的基本假设是数据有序且分布均匀
折半查找这种查找方式，不是自适应的（也就是说是傻瓜式的）。二分查找中查找点计算如下：
　　mid=(low+high)/2, 即mid=low+1/2*(high-low);
　　通过类比，我们可以将查找的点改进为如下：
　　mid=low+(key_value-a[low])/(a[high]-a[low])*(high-low)，
　　也就是将上述的比例参数1/2改进为自适应的，根据关键字在整个有序表中所处的位置，让mid值的变化更靠近关键字key，这样也就间接地减少了比较次数。
　　基本思想：基于二分查找算法，将查找点的选择改进为自适应选择，可以提高查找效率。
  递归写法：
  # 插值查找，只适用于有序的情况
# -*- coding:utf-8 -*-
class Solution:
    def Find(self, value, a,low=0,high=len(a)-1):
        while low<=high:
            mid = low+((high-low)*(value-a[low])/(a[high]-a[low]))
            if a[mid] == value:
                return mid
            if a[mid] > value:
                return self.Find(value,a[low:mid],high=mid)
            if a[mid] < value:
                return self.Find(value,a[mid+1:high+1],low=mid+1)
            return False
        
A=Solution()
A.Find(3,[1,2,3,4])

Note:
mid = low+((high-low)*(value-a[low])/(a[high]-a[low]))
mid = low+((value-a[low])/(a[high]-a[low])*(high-low))
这2个写法结果会不一样，由于python2自动整除的机制，因此除法运算必须注意顺序
